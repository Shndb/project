import random

#1.классы исключения:
class BoardException(Exception):
    pass

class BoardOutException(BoardException): #если выйти за пределы
    def __str__(self):
        return "Выстрел за пределами игровой зоны. Попробуй снова"

class CellAlreadyAttackedError(BoardException): #если выстрел в ту же точку
    def __str__(self):
        return "Ты сюда уже стрелял! Попробуй снова"

class ShipsCrossPaths(BoardException): #если корабли пересекаются
    def __str__(self):
        return "Твои корабли пересекаются. Смени расстановку"

class ObjectTooClose(BoardException): #если корабли имеют интервал расстановки меньше одной клетки
    def __str__(self):
        return "твои корабли расположены слишком близко друг к другу! Смени расстановку"

#2.реализация класса Dot
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

#3.реализация класса Ship

class Ship:
    def __init__(self, length, startpoint, lives, direction,):
        self.length = length
        self.starpoint = startpoint
        self.lives = lives
        self.direction = direction
    @property
    def dots(self):
        ship_dots = []
        for i in range(self.length):
            cur_x, cur_y = self.starpoint.x, self.starpoint.y
            if self.direction == 0:
                cur_x = +1
            else:
                cur_y = +1
            ship_dots.append(Dot(cur_x,cur_y))
        return ship_dots

#4. реализация класса Board

class Board:
    def __init__(self, hid = False, size = 6):
        self.hid = hid
        self.size = size
        self.field = [['0'] * size for i in range(size)]
        self.busy = []
        self.ships = []

    def add_ship(self,ship):
        for dot in ship.dots:
            if self.out(dot) or dot in self.busy or dot in self.contour(ship):
                raise ShipsCrossPaths
        for dot in ship.dots:
            self.field[dot.x][dot.y] = '■'
            self.busy.append(dot)
            self.ships.append(ship)
            self.contour(ship)

    def out(self, dot):
        return not (0 <= dot.x <= self.size and 0 <= dot.y <= self.size)
    def shot(self, dot):
        if self.out(dot):
            raise BoardOutException
        if dot in self.busy:
            raise CellAlreadyAttackedError
        for ship in self.ships:
            if dot in ship.dots:
                ship.lives = -1
                self.field [dot.x] [dot.y] = "X"
                if ship.lives == 0:
                    self.contour(ship, verb = True)
                    self.ships.remove(ship)
                    print("Корабль пал ниц")
                    return True
                else:
                    print("Есть пробитие")
                    return True
        self.field [dot.x] [dot.y] = "T"
        print("Не попал")
        return False

    def __str__(self):
        res = '|' + '|' .join(str(i +1) for i in range(self.size)) + '|\n'
        for i, row in enumerate(self.field):
            res += f'{+1} |' + '|'.join(row) + '|\n'
        if self.hid:
            res = res.replace('<>', '0')
        return res

    def clear_busy_point(self):
        self.busy = []

# 5.реализация класса Player

class Player:
    def __init__(self, my_board, enemy_board):
        self.my_board = my_board
        self.enemy_board = enemy_board

    def ask(self):
        raise NotImplemented

    def move(self):
        while True:
            try:
                target = self.ask()
                again = self.enemy_board.shot(target)
                return again
            except BoardException as z:
                print(z)

#6. наследование User от Player

class User(Player):
    def ask(self):
        while True:
            try:
                coordinate = input("Введите корды x и y через пробел: ").split()

                if len(coordinate) !=2:
                    raise ValueError ('Введено неверное значение')
                x, y = map (int, coordinate)
                if not(1 <=x < self.board.size and 1 <= y < self.board.size):
                    raise ValueError ('Далеко лезешь,значение за пределами игровой зоны')
                return Dot (x - 1, y - 1)
            except ValueError as z:
                print(z)


class AI(Player):
    def ask(self):
        x = random.randint(0, self.board.size - 1)
        y = random.randint(0, self.board.size - 1)
        print(f'AI атакует yf {x + 1}, {y + 1}')
        return Dot(x , y)

#7. реализация класса Game

import random

# 1. Классы исключения:
class BoardException(Exception):
    pass

class BoardOutException(BoardException):  # Если выйти за пределы
    def __str__(self):
        return "Выстрел за пределами игровой зоны. Попробуй снова."

class CellAlreadyAttackedError(BoardException):  # Если выстрел в ту же точку
    def __str__(self):
        return "Ты сюда уже стрелял! Попробуй снова."

class ShipsCrossPaths(BoardException):  # Если корабли пересекаются
    def __str__(self):
        return "Твои корабли пересекаются. Смени расстановку."

class ObjectTooClose(BoardException):  # Если корабли слишком близко
    def __str__(self):
        return "Твои корабли расположены слишком близко друг к другу! Смени расстановку."

# 2. Реализация класса Dot
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y


# 3. Реализация класса Ship
class Ship:
    def __init__(self, length, startpoint, lives, direction):
        self.length = length
        self.startpoint = startpoint
        self.lives = lives
        self.direction = direction  # 0 - горизонтально, 1 - вертикально

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.length):
            cur_x, cur_y = self.startpoint.x, self.startpoint.y
            if self.direction == 0:
                cur_x += i  # Двигаем по оси x
            else:
                cur_y += i  # Двигаем по оси y
            ship_dots.append(Dot(cur_x, cur_y))
        return ship_dots

# 4. Реализация класса Board
class Board:
    def __init__(self, hid=False, size=6):
        self.hid = hid
        self.size = size
        self.field = [['0'] * size for i in range(size)]
        self.busy = []
        self.ships = []

    def add_ship(self, ship):
        for dot in ship.dots:
            if self.out(dot) or dot in self.busy:
                raise ShipsCrossPaths
        for dot in ship.dots:
            self.field[dot.x][dot.y] = '■'
            self.busy.append(dot)
        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1),          (0, 1),
            (1, -1),  (1, 0), (1, 1)
        ]
        for dot in ship.dots:
            for dx, dy in near:
                cur = Dot(dot.x + dx, dot.y + dy)
                if not self.out(cur) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = '.'
                    self.busy.append(cur)

    def out(self, dot):
        return not (0 <= dot.x < self.size and 0 <= dot.y < self.size)

    def shot(self, dot):
        if self.out(dot):
            raise BoardOutException
        if dot in self.busy:
            raise CellAlreadyAttackedError
        self.busy.append(dot)

        for ship in self.ships:
            if dot in ship.dots:
                ship.lives -= 1
                self.field[dot.x][dot.y] = "X"
                if ship.lives == 0:
                    print("Корабль пал ниц!")
                    self.contour(ship, verb=True)
                    self.ships.remove(ship)
                else:
                    print("Есть пробитие!")
                return True
        self.field[dot.x][dot.y] = "T"
        print("Мимо")
        return False

    def __str__(self):
        res = '  ' + ' '.join([str(i + 1) for i in range(self.size)]) + '\n'
        for i, row in enumerate(self.field):
            res += f"{i + 1} " + ' '.join(row) + '\n'
        if self.hid:
            res = res.replace('■', '0')
        return res

    def clear_busy_point(self):
        self.busy = []

    def count_ships(self):
        return len(self.ships)

# 5. Реализация класса Player
class Player:
    def __init__(self, my_board, enemy_board):
        self.my_board = my_board
        self.enemy_board = enemy_board

    def ask(self):
        raise NotImplementedError

    def move(self):
        while True:
            try:
                target = self.ask()
                result = self.enemy_board.shot(target)
                return result
            except BoardException as e:
                print(e)

# 6. Наследование User от Player
class User(Player):
    def ask(self):
        while True:
            try:
                coordinate = input("Введите координаты x и y через пробел: ").split()
                if len(coordinate) != 2:
                    raise ValueError('Введено неверное значение')
                x, y = map(int, coordinate)
                if not (1 <= x <= self.my_board.size and 1 <= y <= self.my_board.size):
                    raise ValueError('Далеко лезешь,значение за пределами игровой зоны.')
                return Dot(x - 1, y - 1)
            except ValueError as e:
                print(e)

class AI(Player):
    def ask(self):
        while True:
            x = random.randint(0, self.enemy_board.size - 1)
            y = random.randint(0, self.enemy_board.size - 1)
            target = Dot(x, y)
            if target not in self.enemy_board.busy:
                print(f'AI атакует: {x + 1}, {y + 1}')
                return target

# 7. Реализация класса Game
class Game:
    def __init__(self, size=6):
        self.size = size
        self.user_board = self.random_board()  # Создаем доску игрока
        self.ai_board = self.random_board(hid=True)  # Создаем скрытую доску AI
        self.ai = AI(self.ai_board, self.user_board)
        self.user = User(self.user_board, self.ai_board)

    def random_board(self, hid=False):
        board = Board(hid=hid, size=self.size)
        ship_lives = [3, 2, 2, 1, 1, 1, 1]  # Количество жизней кораблей/занятых клеток
        attempts = 0
        for lives in ship_lives:
            placed = False
            while not placed and attempts < 2000:
                length = lives
                direction = random.randint(0, 1)  # 0 - горизонтально, 1 - вертикально
                if direction == 0:
                    x = random.randint(0, self.size - 1)
                    y = random.randint(0, self.size - length)
                else:
                    x = random.randint(0, self.size - length)
                    y = random.randint(0, self.size - 1)
                ship = Ship(length, Dot(x, y), lives, direction)
                try:
                    board.add_ship(ship)
                    placed = True
                except BoardException:
                    attempts += 1
            if not placed:
                print("Не удалось разместить все корабли. Попробуйте еще раз.")
                return self.random_board(hid)
        board.clear_busy_point()
        return board

    def greet(self):
        print("Приветствую чемпион")

    def loop(self):
        num = 0
        while True:
            print('Доска игрока:')
            print(self.user_board)
            print('Доска AI:')
            print(self.ai_board)
            if num % 2 == 0:
                print("Ход игрока:")
                repeat = self.user.move()
            else:
                print("Ход AI:")
                repeat = self.ai.move()
            if not repeat:
                num += 1
            if self.ai_board.count_ships() == 0:
                print("Чемпион людей, чемпион кораблей! Поздравляю с победой!") #празднуем победу
                break
            if self.user_board.count_ships() == 0:
                print("Бро тебе надо тренироваться, пробуй снова.") #празднуем поражение
                break

    def start(self):
        self.greet()
        self.loop()

if __name__ == '__main__':
    game = Game()
    game.start()
